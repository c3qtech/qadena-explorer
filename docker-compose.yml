services:
  # default web
  web:
    container_name: web
    build:
      context: .
      target: runner
      args:
        PROJECT_NAME: ${PROJECT_NAME}
#    user: "${UID:-501}:${GID:-20}"
    command: ["yarn", "workspace", "${PROJECT_NAME}", "dev"]
    env_file:
      - .env
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web-qadena/node_modules
      - /app/apps/web-qadena/.next
      - /app/.yarn
    networks:
      - app_network
    depends_on:
      hasura:
        condition: service_healthy

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: callisto
    ports:
      - "5432:5432"
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d callisto"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  hasura:
    image: hasura/graphql-engine:v2.48.6
    container_name: hasura
    platform: linux/amd64
    restart: always
    ports:
      - "${HASURA_PORT}:8080"
    depends_on:
      - postgres
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://root:password@postgres:5432/callisto
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: password      
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      ACTION_BASE_URL: http://localhost:3000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app_network

  callisto:
    image: golang:1.21-alpine
    container_name: callisto
    working_dir: /app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: sh -c "apk add --no-cache git make && GOFLAGS=-mod=vendor make build && ./build/callisto start --home /data"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgres://root:password@postgres:5432/callisto
      - GIT_DISCOVERY_ACROSS_FILESYSTEM=1
    volumes:
      - ./callisto:/app
      - ./callisto_data:/data
    networks:
      - app_network

# Define a network, which allows containers to communicate
# with each other, by using their container name as a hostname
networks:
  app_network:
